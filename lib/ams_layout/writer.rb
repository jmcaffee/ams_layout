##############################################################################
# File::    writer.rb
# Purpose:: Generate a ruby source file that is a base class containing
#           the fields on the Loan Entry screen.
# 
# Author::    Jeff McAffee 06/23/2014
# Copyright:: Copyright (c) 2014, kTech Systems LLC. All rights reserved.
# Website::   http://ktechsystems.com
##############################################################################

require 'ams_layout/core_ext'

module AmsLayout
  class Writer

    attr_writer :class_name
    #attr_writer :aliases

    def source_file_name
      class_name.snakecase + '.rb'
    end

    def class_name
      @class_name ||= AmsLayout.configuration.layout_class_name
    end

    def aliases
      @aliases ||= {}
    end

    def aliases=(data)
      @aliases = Hash(data)
    end

    def write stream, layout
      stream << header

      layout.each do |section_label, fields|
        stream << section(section_label)

        fields.each do |fld|
          stream << field(fld[:label], fld[:id], fld[:type])
          write_aliases stream, fld[:label], fld[:id], fld[:type]
        end # fields
      end # layout

      stream << footer
    end

  private

    def write_aliases stream, label, id, type
      label_aliases = aliases.key?(label) ? aliases[label] : []
      label_aliases.each do |al|
        stream << field_alias(al, id, type)
      end
    end

    def header
      text =<<TEXT
#############################################################################
# #{source_file_name}
#
# This file has been generated by AmsLayout.
# Do not modify this file manually.
#
#############################################################################

require 'pathname'
require Pathname(__FILE__).ascend{|d| h=d+'support_helper.rb'; break h if h.file?}
require 'page-object'

class #{class_name}
  include PageObject

  #
  # Fields (ordered by section as seen on screen)
  #
TEXT
    end

    def section label
      text =<<TEXT


  # Section: #{label}
TEXT
    end

    def field label, id, type
      case type
      when 'text'
        typed_field = 'text_field'
      when 'textarea'
        typed_field = 'text_area'
      when 'select'
        typed_field = 'select_list'
      when 'checkbox'
        typed_field = 'checkbox'
      when 'button'
        typed_field = 'button'
      else
        typed_field = '# unknown_field_type'
      end

      field_label = label.snakecase
      text =<<TEXT
  #{typed_field}(:#{field_label}, id: '#{id}')
TEXT
    end

    def field_alias label, id, type
      text = "  #{field(label, id, type)}"
    end

    def footer
      text =<<TEXT

end # #{class_name}

TEXT
    end
  end # Writer
end # AmsLayout
